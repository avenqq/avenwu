//define(function(require, exports, module) {
	
	var toString = Object.prototype.toString;
	var slice = [].slice;

    var isArray = Array.isArray || function(val) {
		return toString.call(val) === '[object Array]'
    };

    var isFunction = function(val) {
    	return toString.call(val) === '[object Function]'
    };
    
    /*
	 * 实现js的原型继承: 减少内存占用
	 * 设计原则：
	 * 1）所有公共方法（属性，公共私有属性）都放在prototype，为了可以使用原型继承
	 * 2）公共方法（属性）用到的私有方法，需要放在闭包中，或者prototype中(命名以下划线_开头)
	 * 3）对象私有属性需要放在闭包中，或者this中
	 */
	function Class(arg) {
		
		return Class.create(arg);
	}
	
	Class.create = function(arg) {
		var SubClass = create(arg);
		
		SubClass.extend = function(SuperClass) {
			
			return Class.extend(SubClass, SuperClass);
		};

		return SubClass;
	};
	
	Class.extend = function(SubClass, SuperClass) {
		SubClass = create(SubClass);
		SuperClass = create(SuperClass);
		//继承SuperClass的prototype
		SubClass.prototype = extend(SuperClass, SubClass);
		SubClass.prototype.superclass = SuperClass;
		
		return SubClass;
	};
	
	Class.implement = function(SubClass, property) {
		var interfaces = slice.call(arguments, 0);
		interfaces.push(SubClass);
		SubClass = create(SubClass);
		SubClass.prototype = interfaces[0] = createProto({}, SubClass);
		extend.apply(null, interfaces);
		
		return SubClass;
	};
	
	function create(arg) {
		var superclass = noop;
		if (isFunction(arg)) {
			superclass = arg;
			arg = arg.prototype;
		}
		
		function SubClass() {
			superclass.apply(this, arguments);
			//防止调用this.superclass.apply(this, arguments)时造成死循环
			if (this.constructor === SubClass && isFunction(this.initialize)) {
		        this.initialize.apply(this, arguments);
		      }
		}
		
		SubClass.prototype = createProto(arg, SubClass);
		
		return SubClass;
	}
	
	function createProto(obj, constructor) {
		var F = noop;
		F.prototype = obj || {};
		F = new F();
		F.constructor = constructor;
		return F;
	}
	
	function noop() {}
	
	function extend(target, src) {
		for (var i = 1, len = arguments.length; i < len; i++) {
			src = arguments[i];
			if (isFunction(src)) {
				src = src.prototype || {};
			}
			for (var j in src) {
				target[j] = src[j];
			}
		}
		
		return target;
	}
	
//);